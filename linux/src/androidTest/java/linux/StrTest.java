package linux;

import junit.framework.TestCase;

import java.lang.reflect.Field;

import static android.test.MoreAsserts.assertNotEqual;
import static linux.Errno.E2BIG;
import static linux.Errno.EACCES;
import static linux.Errno.EADDRINUSE;
import static linux.Errno.EADDRNOTAVAIL;
import static linux.Errno.EAFNOSUPPORT;
import static linux.Errno.EAGAIN;
import static linux.Errno.EALREADY;
import static linux.Errno.EBADF;
import static linux.Errno.EBADMSG;
import static linux.Errno.EBUSY;
import static linux.Errno.ECANCELED;
import static linux.Errno.ECHILD;
import static linux.Errno.ECONNABORTED;
import static linux.Errno.ECONNREFUSED;
import static linux.Errno.ECONNRESET;
import static linux.Errno.EDEADLK;
import static linux.Errno.EDESTADDRREQ;
import static linux.Errno.EDOM;
import static linux.Errno.EDQUOT;
import static linux.Errno.EEXIST;
import static linux.Errno.EFAULT;
import static linux.Errno.EFBIG;
import static linux.Errno.EHOSTDOWN;
import static linux.Errno.EHOSTUNREACH;
import static linux.Errno.EIDRM;
import static linux.Errno.EILSEQ;
import static linux.Errno.EINPROGRESS;
import static linux.Errno.EINTR;
import static linux.Errno.EINVAL;
import static linux.Errno.EIO;
import static linux.Errno.EISCONN;
import static linux.Errno.EISDIR;
import static linux.Errno.ELOOP;
import static linux.Errno.EMFILE;
import static linux.Errno.EMLINK;
import static linux.Errno.EMSGSIZE;
import static linux.Errno.EMULTIHOP;
import static linux.Errno.ENAMETOOLONG;
import static linux.Errno.ENETDOWN;
import static linux.Errno.ENETRESET;
import static linux.Errno.ENETUNREACH;
import static linux.Errno.ENFILE;
import static linux.Errno.ENOBUFS;
import static linux.Errno.ENODATA;
import static linux.Errno.ENODEV;
import static linux.Errno.ENOENT;
import static linux.Errno.ENOEXEC;
import static linux.Errno.ENOLCK;
import static linux.Errno.ENOLINK;
import static linux.Errno.ENOMEM;
import static linux.Errno.ENOMSG;
import static linux.Errno.ENOPROTOOPT;
import static linux.Errno.ENOSPC;
import static linux.Errno.ENOSR;
import static linux.Errno.ENOSTR;
import static linux.Errno.ENOSYS;
import static linux.Errno.ENOTBLK;
import static linux.Errno.ENOTCONN;
import static linux.Errno.ENOTDIR;
import static linux.Errno.ENOTEMPTY;
import static linux.Errno.ENOTRECOVERABLE;
import static linux.Errno.ENOTSOCK;
import static linux.Errno.ENOTTY;
import static linux.Errno.ENXIO;
import static linux.Errno.EOPNOTSUPP;
import static linux.Errno.EOVERFLOW;
import static linux.Errno.EOWNERDEAD;
import static linux.Errno.EPERM;
import static linux.Errno.EPFNOSUPPORT;
import static linux.Errno.EPIPE;
import static linux.Errno.EPROTO;
import static linux.Errno.EPROTONOSUPPORT;
import static linux.Errno.EPROTOTYPE;
import static linux.Errno.ERANGE;
import static linux.Errno.EREMOTE;
import static linux.Errno.EROFS;
import static linux.Errno.ESHUTDOWN;
import static linux.Errno.ESOCKTNOSUPPORT;
import static linux.Errno.ESPIPE;
import static linux.Errno.ESRCH;
import static linux.Errno.ESTALE;
import static linux.Errno.ETIME;
import static linux.Errno.ETIMEDOUT;
import static linux.Errno.ETOOMANYREFS;
import static linux.Errno.ETXTBSY;
import static linux.Errno.EUSERS;
import static linux.Errno.EWOULDBLOCK;
import static linux.Errno.EXDEV;
import static linux.Str.strerror;

public final class StrTest extends TestCase {

    public void test_strerror_returns_string_error() throws Exception {
        assertEquals("EPERM", "Operation not permitted", strerror(EPERM));
        assertEquals("ENOENT", "No such file or directory", strerror(ENOENT));
        assertEquals("ESRCH", "No such process", strerror(ESRCH));
        assertEquals("EINTR", "Interrupted system call", strerror(EINTR));
        assertEquals("EIO", "I/O error", strerror(EIO));
        assertEquals("ENXIO", "No such device or address", strerror(ENXIO));
        assertEquals("E2BIG", "Argument list too long", strerror(E2BIG));
        assertEquals("ENOEXEC", "Exec format error", strerror(ENOEXEC));
        assertEquals("EBADF", "Bad file number", strerror(EBADF));
        assertEquals("ECHILD", "No child processes", strerror(ECHILD));
        assertEquals("EDEADLK", "Resource deadlock would occur", strerror(EDEADLK));
        assertEquals("ENOMEM", "Out of memory", strerror(ENOMEM));
        assertEquals("EACCES", "Permission denied", strerror(EACCES));
        assertEquals("EFAULT", "Bad address", strerror(EFAULT));
        assertEquals("ENOTBLK", "Block device required", strerror(ENOTBLK));
        assertEquals("EBUSY", "Device or resource busy", strerror(EBUSY));
        assertEquals("EEXIST", "File exists", strerror(EEXIST));
        assertEquals("EXDEV", "Cross-device link", strerror(EXDEV));
        assertEquals("ENODEV", "No such device", strerror(ENODEV));
        assertEquals("ENOTDIR", "Not a directory", strerror(ENOTDIR));
        assertEquals("EISDIR", "Is a directory", strerror(EISDIR));
        assertEquals("EINVAL", "Invalid argument", strerror(EINVAL));
        assertEquals("ENFILE", "File table overflow", strerror(ENFILE));
        assertEquals("EMFILE", "Too many open files", strerror(EMFILE));
        assertEquals("ENOTTY", "Not a typewriter", strerror(ENOTTY));
        assertEquals("ETXTBSY", "Text file busy", strerror(ETXTBSY));
        assertEquals("EFBIG", "File too large", strerror(EFBIG));
        assertEquals("ENOSPC", "No space left on device", strerror(ENOSPC));
        assertEquals("ESPIPE", "Illegal seek", strerror(ESPIPE));
        assertEquals("EROFS", "Read-only file system", strerror(EROFS));
        assertEquals("EMLINK", "Too many links", strerror(EMLINK));
        assertEquals("EPIPE", "Broken pipe", strerror(EPIPE));
        assertEquals("EDOM", "Math argument out of domain of func", strerror(EDOM));
        assertEquals("ERANGE", "Math result not representable", strerror(ERANGE));
        assertEquals("EAGAIN", "Try again", strerror(EAGAIN));
        assertEquals("EWOULDBLOCK", "Try again", strerror(EWOULDBLOCK));
        assertEquals("EINPROGRESS", "Operation now in progress", strerror(EINPROGRESS));
        assertEquals("EALREADY", "Operation already in progress", strerror(EALREADY));
        assertEquals("ENOTSOCK", "Socket operation on non-socket", strerror(ENOTSOCK));
        assertEquals("EDESTADDRREQ", "Destination address required", strerror(EDESTADDRREQ));
        assertEquals("EMSGSIZE", "Message too long", strerror(EMSGSIZE));
        assertEquals("EPROTOTYPE", "Protocol wrong type for socket", strerror(EPROTOTYPE));
        assertEquals("ENOPROTOOPT", "Protocol not available", strerror(ENOPROTOOPT));
        assertEquals("EPROTONOSUPPORT", "Protocol not supported", strerror(EPROTONOSUPPORT));
        assertEquals("ESOCKTNOSUPPORT", "Socket type not supported", strerror(ESOCKTNOSUPPORT));
        assertEquals("EPFNOSUPPORT", "Protocol family not supported", strerror(EPFNOSUPPORT));
        assertEquals("EAFNOSUPPORT", "Address family not supported by protocol", strerror(EAFNOSUPPORT));
        assertEquals("EADDRINUSE", "Address already in use", strerror(EADDRINUSE));
        assertEquals("EADDRNOTAVAIL", "Cannot assign requested address", strerror(EADDRNOTAVAIL));
        assertEquals("ENETDOWN", "Network is down", strerror(ENETDOWN));
        assertEquals("ENETUNREACH", "Network is unreachable", strerror(ENETUNREACH));
        assertEquals("ENETRESET", "Network dropped connection because of reset", strerror(ENETRESET));
        assertEquals("ECONNABORTED", "Software caused connection abort", strerror(ECONNABORTED));
        assertEquals("ECONNRESET", "Connection reset by peer", strerror(ECONNRESET));
        assertEquals("ENOBUFS", "No buffer space available", strerror(ENOBUFS));
        assertEquals("EISCONN", "Transport endpoint is already connected", strerror(EISCONN));
        assertEquals("ENOTCONN", "Transport endpoint is not connected", strerror(ENOTCONN));
        assertEquals("ESHUTDOWN", "Cannot send after transport endpoint shutdown", strerror(ESHUTDOWN));
        assertEquals("ETOOMANYREFS", "Too many references: cannot splice", strerror(ETOOMANYREFS));
        assertEquals("ETIMEDOUT", "Connection timed out", strerror(ETIMEDOUT));
        assertEquals("ECONNREFUSED", "Connection refused", strerror(ECONNREFUSED));
        assertEquals("ELOOP", "Too many symbolic links encountered", strerror(ELOOP));
        assertEquals("ENAMETOOLONG", "File name too long", strerror(ENAMETOOLONG));
        assertEquals("EHOSTDOWN", "Host is down", strerror(EHOSTDOWN));
        assertEquals("EHOSTUNREACH", "No route to host", strerror(EHOSTUNREACH));
        assertEquals("ENOTEMPTY", "Directory not empty", strerror(ENOTEMPTY));
        assertEquals("EUSERS", "Too many users", strerror(EUSERS));
        assertEquals("EDQUOT", "Quota exceeded", strerror(EDQUOT));
        assertEquals("ESTALE", "Stale NFS file handle", strerror(ESTALE));
        assertEquals("EREMOTE", "Object is remote", strerror(EREMOTE));
        assertEquals("ENOLCK", "No record locks available", strerror(ENOLCK));
        assertEquals("ENOSYS", "Function not implemented", strerror(ENOSYS));
        assertEquals("EOVERFLOW", "Value too large for defined data type", strerror(EOVERFLOW));
        assertEquals("ECANCELED", "Operation Canceled", strerror(ECANCELED));
        assertEquals("EIDRM", "Identifier removed", strerror(EIDRM));
        assertEquals("ENOMSG", "No message of desired type", strerror(ENOMSG));
        assertEquals("EILSEQ", "Illegal byte sequence", strerror(EILSEQ));
        assertEquals("EBADMSG", "Not a data message", strerror(EBADMSG));
        assertEquals("EMULTIHOP", "Multihop attempted", strerror(EMULTIHOP));
        assertEquals("ENODATA", "No data available", strerror(ENODATA));
        assertEquals("ENOLINK", "Link has been severed", strerror(ENOLINK));
        assertEquals("ENOSR", "Out of streams resources", strerror(ENOSR));
        assertEquals("ENOSTR", "Device not a stream", strerror(ENOSTR));
        assertEquals("EPROTO", "Protocol error", strerror(EPROTO));
        assertEquals("ETIME", "Timer expired", strerror(ETIME));
        assertEquals("EOPNOTSUPP", "Operation not supported on transport endpoint", strerror(EOPNOTSUPP));
        assertEquals("ENOTRECOVERABLE", "State not recoverable", strerror(ENOTRECOVERABLE));
        assertEquals("EOWNERDEAD", "Owner died", strerror(EOWNERDEAD));
    }

    public void test_strerror_can_handle_all_errno() throws Exception {
        Field[] fields = Errno.class.getFields();
        assertNotEqual(0, fields.length);
        for (Field field : fields) {
            assertNotNull(strerror(field.getInt(null)));
        }
    }

}
