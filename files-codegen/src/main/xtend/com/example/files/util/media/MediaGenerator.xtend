package com.example.files.util.media

import java.io.File
import java.net.URL
import java.util.Map
import java.util.Set
import java.util.TreeMap
import org.jdom2.input.SAXBuilder

import static com.google.common.base.Charsets.*
import static com.google.common.io.Files.*
import static java.util.Locale.*

class MediaGenerator {

  static val PACKAGE = "com.example.files.media"
  static val OUTPUT_DIRECTORY = System::getProperty("user.home") + "/Desktop"
  static val MEDIA_URL = new URL("http://svn.apache.org/repos/asf/tomcat/trunk/conf/web.xml")

  def static void main(String[] args) {
    generate
  }

  def private static void generate() {
    val root = new SAXBuilder().build(MEDIA_URL).rootElement
    val ns = root.namespace
    val medias = new TreeMap<String, String>
    val mimes = root.getChildren("mime-mapping", ns)
    mimes.forEach [ mime |
      medias.put(
        mime.getChildText("extension", ns).toLowerCase(ENGLISH),
        mime.getChildText("mime-type", ns).toLowerCase(ENGLISH)
      )
    ]

    write(generateMedias(medias, PACKAGE), new File(OUTPUT_DIRECTORY, "Medias.java"), UTF_8)
    write(generateImages(medias, PACKAGE), new File(OUTPUT_DIRECTORY, "Images.java"), UTF_8)
  }

  def private static generateMedias(Map<String, String> types, String pkg) '''
    // Generated by «typeof(MediaGenerator).name»
    package «pkg»;

    import static java.util.Collections.unmodifiableMap;
    import static java.util.Locale.ENGLISH;

    import java.util.HashMap;
    import java.util.Map;

    class Medias {

      private static final Map<String, String> TYPES = mediaTypes();

      private static Map<String, String> mediaTypes() {
        «map(types)»
      }

      /**
       * Gets the media type for the given file extension.
       *
       * @param extension the file extension without the ".", case insensitive
       */
      public static String get(String extension) {
        return TYPES.get(extension.toLowerCase(ENGLISH));
      }

    }
  '''

  def private static map(Map<String, String> map) '''
    Map<String, String> map = new HashMap<String, String>(«capacity(map.size)»);
    «FOR entry : map.entrySet»
    map.put("«entry.key»", "«entry.value»");
    «ENDFOR»
    return unmodifiableMap(map);
  '''

  def private static generateImages(Map<String, String> types, String pkg) {
    val texts = types.filter(key, value|value.startsWith("text")).keySet
    val images = types.filter(key, value|value.startsWith("image")).keySet
    val audios = types.filter(key, value|value.startsWith("audio")).keySet
    val videos = types.filter(key, value|value.startsWith("video")).keySet
    val archives = newHashSet("bz2", "gz", "z", "7z", "ace", "rar", "tar", "zip")
    '''
      // Generated by «typeof(MediaGenerator).name»
      package «pkg»;

      import static java.util.Collections.unmodifiableSet;
      import static java.util.Locale.ENGLISH;

      import java.util.HashSet;
      import java.util.Set;
      import com.example.files.R;

      class Images {

        private static final Set<String> ARCHIVES = archives();
        private static final Set<String> AUDIOS = audios();
        private static final Set<String> VIDEOS = videos();
        private static final Set<String> IMAGES = images();
        private static final Set<String> TEXTS = texts();

        private static Set<String> archives() {
          «set(archives)»
        }

        private static Set<String> audios() {
          «set(audios)»
        }

        private static Set<String> videos() {
          «set(videos)»
        }

        private static Set<String> images() {
          «set(images)»
        }

        private static Set<String> texts() {
          «set(texts)»
        }

        public static int get(String extension) {
          String ext = extension.toLowerCase(ENGLISH);
          if (ext.equals("pdf")) return R.drawable.ic_file_pdf;
          if (ARCHIVES.contains(ext)) return R.drawable.ic_file_archive;
          if (AUDIOS.contains(ext)) return R.drawable.ic_file_audio;
          if (VIDEOS.contains(ext)) return R.drawable.ic_file_video;
          if (IMAGES.contains(ext)) return R.drawable.ic_file_image;
          if (TEXTS.contains(ext)) return R.drawable.ic_file_text;
          return R.drawable.ic_file;
        }
      }
    '''
  }

  def private static set(Set<String> set) '''
    Set<String> set = new HashSet<String>(«capacity(set.size)»);
    «FOR element : set»
    set.add("«element»");
    «ENDFOR»
    return unmodifiableSet(set);
  '''

  def private static capacity(int expectedSize) {
    return expectedSize + expectedSize / 3;
  }
}
