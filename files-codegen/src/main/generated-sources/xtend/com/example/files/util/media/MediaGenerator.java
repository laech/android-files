package com.example.files.util.media;

import com.google.common.base.Charsets;
import com.google.common.io.Files;
import java.io.File;
import java.io.InputStream;
import java.net.URL;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.TreeMap;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Functions.Function0;
import org.eclipse.xtext.xbase.lib.Functions.Function2;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.MapExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.jdom2.Document;
import org.jdom2.Element;
import org.jdom2.Namespace;
import org.jdom2.input.SAXBuilder;

@SuppressWarnings("all")
public class MediaGenerator {
  private final static URL MEDIA_URL = new Function0<URL>() {
    public URL apply() {
      try {
        URL _uRL = new URL("http://svn.apache.org/repos/asf/tomcat/trunk/conf/web.xml");
        return _uRL;
      } catch (Exception _e) {
        throw Exceptions.sneakyThrow(_e);
      }
    }
  }.apply();
  
  public static void main(final String[] args) {
    try {
      final InputStream in = MediaGenerator.MEDIA_URL.openStream();
      try {
        SAXBuilder _sAXBuilder = new SAXBuilder();
        Document _build = _sAXBuilder.build(in);
        final Element root = _build.getRootElement();
        final Namespace ns = root.getNamespace();
        TreeMap<String,String> _treeMap = new TreeMap<String,String>();
        final TreeMap<String,String> medias = _treeMap;
        final List<Element> mimes = root.getChildren("mime-mapping", ns);
        final Procedure1<Element> _function = new Procedure1<Element>() {
            public void apply(final Element mime) {
              String _childText = mime.getChildText("extension", ns);
              String _lowerCase = _childText.toLowerCase(Locale.ENGLISH);
              String _childText_1 = mime.getChildText("mime-type", ns);
              String _lowerCase_1 = _childText_1.toLowerCase(Locale.ENGLISH);
              medias.put(_lowerCase, _lowerCase_1);
            }
          };
        IterableExtensions.<Element>forEach(mimes, _function);
        CharSequence _generateMediaMap = MediaGenerator.generateMediaMap(medias);
        File _output = MediaGenerator.output("Medias.java");
        Files.write(_generateMediaMap, _output, Charsets.UTF_8);
        CharSequence _generateImageMap = MediaGenerator.generateImageMap(medias);
        File _output_1 = MediaGenerator.output("Images.java");
        Files.write(_generateImageMap, _output_1, Charsets.UTF_8);
      } finally {
        in.close();
      }
    } catch (Exception _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public static File output(final String name) {
    String _property = System.getProperty("user.home");
    String _plus = (_property + "/Desktop/");
    String _plus_1 = (_plus + name);
    File _file = new File(_plus_1);
    return _file;
  }
  
  public static CharSequence generateMediaMap(final Map<String,String> types) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("// This file is generated by ");
    String _name = MediaGenerator.class.getName();
    _builder.append(_name, "");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("package com.example.files.media;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import static java.util.Locale.ENGLISH;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class Medias {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("* Gets the media type for the given file extension.");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("* @param extension the file extension without the \".\", in any case");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public static String get(String extension) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("switch (extension.toLowerCase(ENGLISH)) {");
    _builder.newLine();
    {
      Set<Entry<String,String>> _entrySet = types.entrySet();
      for(final Entry<String,String> entry : _entrySet) {
        _builder.append("      ");
        _builder.append("case \"");
        String _key = entry.getKey();
        _builder.append(_key, "      ");
        _builder.append("\": return \"");
        String _value = entry.getValue();
        _builder.append(_value, "      ");
        _builder.append("\";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("      ");
    _builder.append("default: return null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public static CharSequence generateImageMap(final Map<String,String> types) {
    CharSequence _xblockexpression = null;
    {
      final Function2<String,String,Boolean> _function = new Function2<String,String,Boolean>() {
          public Boolean apply(final String key, final String value) {
            boolean _equals = key.equals("pdf");
            return Boolean.valueOf(_equals);
          }
        };
      final Map<String,String> pdf = MapExtensions.<String, String>filter(types, _function);
      final Function2<String,String,Boolean> _function_1 = new Function2<String,String,Boolean>() {
          public Boolean apply(final String key, final String value) {
            boolean _startsWith = value.startsWith("text");
            return Boolean.valueOf(_startsWith);
          }
        };
      final Map<String,String> texts = MapExtensions.<String, String>filter(types, _function_1);
      final Function2<String,String,Boolean> _function_2 = new Function2<String,String,Boolean>() {
          public Boolean apply(final String key, final String value) {
            boolean _startsWith = value.startsWith("image");
            return Boolean.valueOf(_startsWith);
          }
        };
      final Map<String,String> images = MapExtensions.<String, String>filter(types, _function_2);
      final Function2<String,String,Boolean> _function_3 = new Function2<String,String,Boolean>() {
          public Boolean apply(final String key, final String value) {
            boolean _startsWith = value.startsWith("audio");
            return Boolean.valueOf(_startsWith);
          }
        };
      final Map<String,String> audios = MapExtensions.<String, String>filter(types, _function_3);
      final Function2<String,String,Boolean> _function_4 = new Function2<String,String,Boolean>() {
          public Boolean apply(final String key, final String value) {
            boolean _startsWith = value.startsWith("video");
            return Boolean.valueOf(_startsWith);
          }
        };
      final Map<String,String> videos = MapExtensions.<String, String>filter(types, _function_4);
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("// This file is generated by ");
      String _name = MediaGenerator.class.getName();
      _builder.append(_name, "");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("package com.example.files.media;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("import static java.util.Locale.ENGLISH;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("import com.example.files.R;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("class Images {");
      _builder.newLine();
      _builder.newLine();
      _builder.append("  ");
      _builder.append("/**");
      _builder.newLine();
      _builder.append("   ");
      _builder.append("* Gets the drawable resource ID for the given file extension.");
      _builder.newLine();
      _builder.append("   ");
      _builder.append("*");
      _builder.newLine();
      _builder.append("   ");
      _builder.append("* @param extension the file extension without the \".\", in any case");
      _builder.newLine();
      _builder.append("   ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("public static int get(String extension) {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("switch (extension.toLowerCase(ENGLISH)) {");
      _builder.newLine();
      _builder.append("      ");
      CharSequence _cases = MediaGenerator.cases(pdf, "R.drawable.ic_file_pdf");
      _builder.append(_cases, "      ");
      _builder.newLineIfNotEmpty();
      _builder.append("      ");
      CharSequence _cases_1 = MediaGenerator.cases(audios, "R.drawable.ic_image");
      _builder.append(_cases_1, "      ");
      _builder.newLineIfNotEmpty();
      _builder.append("      ");
      CharSequence _cases_2 = MediaGenerator.cases(videos, "R.drawable.ic_image");
      _builder.append(_cases_2, "      ");
      _builder.newLineIfNotEmpty();
      _builder.append("      ");
      CharSequence _cases_3 = MediaGenerator.cases(images, "R.drawable.ic_image");
      _builder.append(_cases_3, "      ");
      _builder.newLineIfNotEmpty();
      _builder.append("      ");
      CharSequence _cases_4 = MediaGenerator.cases(texts, "R.drawable.ic_image");
      _builder.append(_cases_4, "      ");
      _builder.newLineIfNotEmpty();
      _builder.append("      ");
      _builder.append("default:");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("return R.drawable.ic_file;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _xblockexpression = (_builder);
    }
    return _xblockexpression;
  }
  
  public static CharSequence cases(final Map<String,String> map, final String result) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Set<Entry<String,String>> _entrySet = map.entrySet();
      for(final Entry<String,String> entry : _entrySet) {
        _builder.append("case \"");
        String _key = entry.getKey();
        _builder.append(_key, "");
        _builder.append("\":");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("  ");
    _builder.append("return ");
    _builder.append(result, "  ");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public static int capacity(final int expectedSize) {
    int _divide = (expectedSize / 3);
    return (expectedSize + _divide);
  }
}
