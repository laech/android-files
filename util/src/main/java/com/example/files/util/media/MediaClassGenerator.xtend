package com.example.files.util.media

import com.google.common.io.LineProcessor
import java.io.File
import java.net.URL
import java.util.Map
import java.util.TreeMap

import static com.example.files.util.media.Main.*
import static com.google.common.base.Charsets.*
import static com.google.common.base.Splitter.*
import static com.google.common.io.Files.*
import static com.google.common.io.Resources.*
import static java.lang.System.*

class Main {

  static val mediaUrl = new URL(
    "http://svn.apache.org/viewvc/httpd/httpd/trunk/docs/conf/mime.types?view=co")

  static val outputFile = new File(getProperty("user.home") + "/Desktop/MediaMap.java")

  def static main(String[] args) {
    val medias = readLines(mediaUrl, UTF_8, new MediaLineProcessor)
    write(new MediaClassGenerator().generate(medias), outputFile, UTF_8)
  }

}

class MediaClassGenerator {

  def generate(Map<String, String> types) '''
    // This file is generated by «typeof(MediaClassGenerator).name»

    package com.example.files.media;

    import static java.util.Locale.ENGLISH;

    import java.util.Map;
    import java.util.HashMap;

    public class MediaMap {

      private static final Map<String, String> TYPES;

      static {
        TYPES = new HashMap<String, String>(«types.size + types.size / 3»);
        «FOR type : types.entrySet»
        TYPES.put("«type.key»", "«type.value»");
        «ENDFOR»
      }

      /**
       * Gets the media type for the given file extension.
       *
       * @param extension the file extension without the ".", in any case
       */
      public String get(String extension) {
        return TYPES.get(extension.toLowerCase(ENGLISH));
      }

    }
    '''
  
}

class MediaLineProcessor implements LineProcessor<Map<String, String>> {

  val notAComment = [String line |
     !line.startsWith("#")
  ]

  val result = new TreeMap<String, String>

  override getResult() {
    result
  }

  override processLine(String line) {
    processIf(notAComment, line)
    true
  }

  def private processIf((String) => Boolean process, String line) {
    if (process.apply(line)) {
      val iterator = onPattern("\\s").omitEmptyStrings.split(line).iterator
      val media = iterator.next
      iterator.forEach(ext | result.put(ext, media))
    }
  }
}