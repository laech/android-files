package com.example.files.util.media

import java.io.File
import java.net.URL
import java.util.Map
import java.util.TreeMap
import org.jdom2.input.SAXBuilder

import static com.example.files.util.media.Main.*
import static com.google.common.base.Charsets.*
import static com.google.common.io.Files.*
import static java.lang.System.*
import static java.util.Locale.*

class Main {

  // TODO Update to string switching for better memory management

  static val MEDIA_URL =
    new URL("http://svn.apache.org/repos/asf/tomcat/trunk/conf/web.xml")

  def static void main(String[] args) {
    val in = MEDIA_URL.openStream
    try {

      val root = new SAXBuilder().build(in).rootElement
      val ns = root.namespace
      val medias = new TreeMap<String, String>
      val mimes = root.getChildren("mime-mapping", ns)
      mimes.forEach[mime |
        medias.put(
          mime.getChildText("extension", ns).toLowerCase(ENGLISH),
          mime.getChildText("mime-type", ns).toLowerCase(ENGLISH)
        )
      ]

      write(generateMediaMap(medias), output("MediaMap.java"), UTF_8)
      write(generateImageMap(medias), output("ImageMap.java"), UTF_8)

    } finally {
      in.close
    }
  }

  def static output(String name) {
    new File(getProperty("user.home") + "/Desktop/" + name)
  }

  def static generateMediaMap(Map<String, String> types) '''
    // This file is generated by «typeof(MediaClassGenerator).name»

    package com.example.files.media;

    import static java.util.Collections.unmodifiableMap;
    import static java.util.Locale.ENGLISH;

    import java.util.HashMap;
    import java.util.Map;

    public class MediaMap {

      private static final Map<String, String> TYPES = mediaTypes();

      private static Map<String, String> mediaTypes() {
        «generateCopy(types)»
      }

      /**
       * Gets the media type for the given file extension.
       *
       * @param extension the file extension without the ".", in any case
       */
      public String get(String extension) {
        return TYPES.get(extension.toLowerCase(ENGLISH));
      }

    }
    '''

  def static generateImageMap(Map<String, String> types) {
    val texts = types.filter(key, value | value.startsWith("text"))
    val images = types.filter(key, value | value.startsWith("image"))
    val audios = types.filter(key, value | value.startsWith("audio"))
    val videos = types.filter(key, value | value.startsWith("video"))
    '''
    // This file is generated by «typeof(MediaClassGenerator).name»

    package com.example.files.media;

    import static java.util.Collections.unmodifiableMap;

    import java.io.File;
    import java.util.HashMap;
    import java.util.Map;

    public abstract class ImageMap {

      static final Map<String, String> AUDIOS = audios();
      static final Map<String, String> VIDEOS = videos();
      static final Map<String, String> IMAGES = images();
      static final Map<String, String> TEXTS = texts();

      private static Map<String, String> audios() {
        «generateCopy(audios)»
      }

      private static Map<String, String> videos() {
        «generateCopy(videos)»
      }

      private static Map<String, String> images() {
        «generateCopy(images)»
      }

      private static Map<String, String> texts() {
        «generateCopy(texts)»
      }

      public abstract int get(File file);
    }
    '''
  }

  def static generateCopy(Map<String, String> map) '''
    Map<String, String> map = new HashMap<String, String>(«capacity(map.size)»);
    «FOR entry : map.entrySet»
    map.put("«entry.key»", "«entry.value»");
    «ENDFOR»
    return unmodifiableMap(map);
  '''

  def static capacity(int expectedSize) {
    return expectedSize + expectedSize / 3;
  }
}
