package l.files.util.media

import java.io.File
import java.net.URL
import java.util.Map
import java.util.Set
import java.util.TreeMap
import org.jdom2.input.SAXBuilder

import static com.google.common.base.Charsets.*
import static com.google.common.io.Files.*
import static java.util.Locale.*

class MediaGenerator {

  static val PACKAGE = "l.files.app.format"
  static val OUTPUT_DIRECTORY = System::getProperty("user.home") + "/Desktop"
  static val MEDIA_URL = new URL("http://svn.apache.org/repos/asf/tomcat/trunk/conf/web.xml")

  def static void main(String[] args) {
    generate
  }

  def private static void generate() {
    val root = new SAXBuilder().build(MEDIA_URL).rootElement
    val ns = root.namespace
    val medias = new TreeMap<String, String>
    val mimes = root.getChildren("mime-mapping", ns)
    mimes.forEach [ mime |
      medias.put(
        mime.getChildText("extension", ns).toLowerCase(ENGLISH),
        mime.getChildText("mime-type", ns).toLowerCase(ENGLISH)
      )
    ]

    write(generateImages(medias, PACKAGE), new File(OUTPUT_DIRECTORY, "FileExtensions.java"), UTF_8)
  }

  def private static generateImages(Map<String, String> types, String pkg) {
    val texts = types.filter(key, value|value.startsWith("text")).keySet
    val images = types.filter(key, value|value.startsWith("image")).keySet
    val audios = types.filter(key, value|value.startsWith("audio")).keySet
    val videos = types.filter(key, value|value.startsWith("video")).keySet
    val archives = newHashSet("bz2", "gz", "z", "7z", "ace", "rar", "tar", "zip")
    val pdfs = newHashSet("pdf")
    '''
      // Generated by «typeof(MediaGenerator).name»
      package «pkg»;

      import static java.util.Collections.unmodifiableSet;

      import java.util.HashSet;
      import java.util.Set;

      class FileExtensions {

        public static final Set<String> ARCHIVES = archives();
        public static final Set<String> AUDIOS = audios();
        public static final Set<String> VIDEOS = videos();
        public static final Set<String> IMAGES = images();
        public static final Set<String> TEXTS = texts();
        public static final Set<String> PDFS = pdfs();

        private static Set<String> archives() {
          «set(archives)»
        }

        private static Set<String> audios() {
          «set(audios)»
        }

        private static Set<String> videos() {
          «set(videos)»
        }

        private static Set<String> images() {
          «set(images)»
        }

        private static Set<String> texts() {
          «set(texts)»
        }
      
        private static Set<String> pdfs() {
        	«set(pdfs)»
        }
      }
    '''
  }

  def private static set(Set<String> set) '''
    Set<String> set = new HashSet<String>(«capacity(set.size)»);
    «FOR element : set»
    set.add("«element»");
    «ENDFOR»
    return unmodifiableSet(set);
  '''

  def private static capacity(int expectedSize) {
    return expectedSize + expectedSize / 3;
  }
}
