// This file is generated by com.example.files.util.media.MediaClassGenerator

package com.example.files.media;

import static java.util.Collections.unmodifiableMap;

import java.io.File;
import java.util.HashMap;
import java.util.Map;

public abstract class ImageMap {

  static final Map<String, String> AUDIOS = audios();
  static final Map<String, String> VIDEOS = videos();
  static final Map<String, String> IMAGES = images();
  static final Map<String, String> TEXTS = texts();

  private static Map<String, String> audios() {
    Map<String, String> map = new HashMap<String, String>(76);
    map.put("aac", "audio/x-aac");
    map.put("abs", "audio/x-mpeg");
    map.put("adp", "audio/adpcm");
    map.put("aif", "audio/x-aiff");
    map.put("aifc", "audio/x-aiff");
    map.put("aiff", "audio/x-aiff");
    map.put("au", "audio/basic");
    map.put("axa", "audio/annodex");
    map.put("caf", "audio/x-caf");
    map.put("dra", "audio/vnd.dra");
    map.put("dts", "audio/vnd.dts");
    map.put("dtshd", "audio/vnd.dts.hd");
    map.put("ecelp4800", "audio/vnd.nuera.ecelp4800");
    map.put("ecelp7470", "audio/vnd.nuera.ecelp7470");
    map.put("ecelp9600", "audio/vnd.nuera.ecelp9600");
    map.put("eol", "audio/vnd.digital-winds");
    map.put("flac", "audio/flac");
    map.put("kar", "audio/midi");
    map.put("lvp", "audio/vnd.lucent.voice");
    map.put("m2a", "audio/mpeg");
    map.put("m3a", "audio/mpeg");
    map.put("m3u", "audio/x-mpegurl");
    map.put("m4a", "audio/mp4");
    map.put("m4b", "audio/mp4");
    map.put("m4r", "audio/mp4");
    map.put("mid", "audio/midi");
    map.put("midi", "audio/midi");
    map.put("mka", "audio/x-matroska");
    map.put("mp1", "audio/mpeg");
    map.put("mp2", "audio/mpeg");
    map.put("mp2a", "audio/mpeg");
    map.put("mp3", "audio/mpeg");
    map.put("mp4a", "audio/mp4");
    map.put("mpa", "audio/mpeg");
    map.put("mpega", "audio/x-mpeg");
    map.put("mpga", "audio/mpeg");
    map.put("oga", "audio/ogg");
    map.put("ogg", "audio/ogg");
    map.put("pls", "audio/x-scpls");
    map.put("pya", "audio/vnd.ms-playready.media.pya");
    map.put("ra", "audio/x-pn-realaudio");
    map.put("ram", "audio/x-pn-realaudio");
    map.put("rip", "audio/vnd.rip");
    map.put("rmi", "audio/midi");
    map.put("rmp", "audio/x-pn-realaudio-plugin");
    map.put("s3m", "audio/s3m");
    map.put("sil", "audio/silk");
    map.put("snd", "audio/basic");
    map.put("spx", "audio/ogg");
    map.put("ulw", "audio/basic");
    map.put("uva", "audio/vnd.dece.audio");
    map.put("uvva", "audio/vnd.dece.audio");
    map.put("wav", "audio/x-wav");
    map.put("wax", "audio/x-ms-wax");
    map.put("weba", "audio/webm");
    map.put("wma", "audio/x-ms-wma");
    map.put("xm", "audio/xm");
    return unmodifiableMap(map);
  }

  private static Map<String, String> videos() {
    Map<String, String> map = new HashMap<String, String>(82);
    map.put("3g2", "video/3gpp2");
    map.put("3gp", "video/3gpp");
    map.put("asf", "video/x-ms-asf");
    map.put("asx", "video/x-ms-asf");
    map.put("avi", "video/x-msvideo");
    map.put("avx", "video/x-rad-screenplay");
    map.put("axv", "video/annodex");
    map.put("dv", "video/x-dv");
    map.put("dvb", "video/vnd.dvb.file");
    map.put("f4v", "video/x-f4v");
    map.put("fli", "video/x-fli");
    map.put("flv", "video/x-flv");
    map.put("fvt", "video/vnd.fvt");
    map.put("h261", "video/h261");
    map.put("h263", "video/h263");
    map.put("h264", "video/h264");
    map.put("jpgm", "video/jpm");
    map.put("jpgv", "video/jpeg");
    map.put("jpm", "video/jpm");
    map.put("m1v", "video/mpeg");
    map.put("m2v", "video/mpeg");
    map.put("m4u", "video/vnd.mpegurl");
    map.put("m4v", "video/mp4");
    map.put("mj2", "video/mj2");
    map.put("mjp2", "video/mj2");
    map.put("mk3d", "video/x-matroska");
    map.put("mks", "video/x-matroska");
    map.put("mkv", "video/x-matroska");
    map.put("mng", "video/x-mng");
    map.put("mov", "video/quicktime");
    map.put("movie", "video/x-sgi-movie");
    map.put("mp4", "video/mp4");
    map.put("mp4v", "video/mp4");
    map.put("mpe", "video/mpeg");
    map.put("mpeg", "video/mpeg");
    map.put("mpg", "video/mpeg");
    map.put("mpg4", "video/mp4");
    map.put("mpv2", "video/mpeg2");
    map.put("mxu", "video/vnd.mpegurl");
    map.put("ogv", "video/ogg");
    map.put("pyv", "video/vnd.ms-playready.media.pyv");
    map.put("qt", "video/quicktime");
    map.put("smv", "video/x-smv");
    map.put("uvh", "video/vnd.dece.hd");
    map.put("uvm", "video/vnd.dece.mobile");
    map.put("uvp", "video/vnd.dece.pd");
    map.put("uvs", "video/vnd.dece.sd");
    map.put("uvu", "video/vnd.uvvu.mp4");
    map.put("uvv", "video/vnd.dece.video");
    map.put("uvvh", "video/vnd.dece.hd");
    map.put("uvvm", "video/vnd.dece.mobile");
    map.put("uvvp", "video/vnd.dece.pd");
    map.put("uvvs", "video/vnd.dece.sd");
    map.put("uvvu", "video/vnd.uvvu.mp4");
    map.put("uvvv", "video/vnd.dece.video");
    map.put("viv", "video/vnd.vivo");
    map.put("vob", "video/x-ms-vob");
    map.put("webm", "video/webm");
    map.put("wm", "video/x-ms-wm");
    map.put("wmv", "video/x-ms-wmv");
    map.put("wmx", "video/x-ms-wmx");
    map.put("wvx", "video/x-ms-wvx");
    return unmodifiableMap(map);
  }

  private static Map<String, String> images() {
    Map<String, String> map = new HashMap<String, String>(86);
    map.put("3ds", "image/x-3ds");
    map.put("art", "image/x-jg");
    map.put("bmp", "image/bmp");
    map.put("btif", "image/prs.btif");
    map.put("cgm", "image/cgm");
    map.put("cmx", "image/x-cmx");
    map.put("dib", "image/bmp");
    map.put("djv", "image/vnd.djvu");
    map.put("djvu", "image/vnd.djvu");
    map.put("dwg", "image/vnd.dwg");
    map.put("dxf", "image/vnd.dxf");
    map.put("fbs", "image/vnd.fastbidsheet");
    map.put("fh", "image/x-freehand");
    map.put("fh4", "image/x-freehand");
    map.put("fh5", "image/x-freehand");
    map.put("fh7", "image/x-freehand");
    map.put("fhc", "image/x-freehand");
    map.put("fpx", "image/vnd.fpx");
    map.put("fst", "image/vnd.fst");
    map.put("g3", "image/g3fax");
    map.put("gif", "image/gif");
    map.put("ico", "image/x-icon");
    map.put("ief", "image/ief");
    map.put("jpe", "image/jpeg");
    map.put("jpeg", "image/jpeg");
    map.put("jpg", "image/jpeg");
    map.put("ktx", "image/ktx");
    map.put("mac", "image/x-macpaint");
    map.put("mdi", "image/vnd.ms-modi");
    map.put("mmr", "image/vnd.fujixerox.edmics-mmr");
    map.put("npx", "image/vnd.net-fpx");
    map.put("pbm", "image/x-portable-bitmap");
    map.put("pct", "image/pict");
    map.put("pcx", "image/x-pcx");
    map.put("pgm", "image/x-portable-graymap");
    map.put("pic", "image/pict");
    map.put("pict", "image/pict");
    map.put("png", "image/png");
    map.put("pnm", "image/x-portable-anymap");
    map.put("pnt", "image/x-macpaint");
    map.put("ppm", "image/x-portable-pixmap");
    map.put("psd", "image/vnd.adobe.photoshop");
    map.put("qti", "image/x-quicktime");
    map.put("qtif", "image/x-quicktime");
    map.put("ras", "image/x-cmu-raster");
    map.put("rgb", "image/x-rgb");
    map.put("rlc", "image/vnd.fujixerox.edmics-rlc");
    map.put("sgi", "image/sgi");
    map.put("sid", "image/x-mrsid-image");
    map.put("svg", "image/svg+xml");
    map.put("svgz", "image/svg+xml");
    map.put("tga", "image/x-tga");
    map.put("tif", "image/tiff");
    map.put("tiff", "image/tiff");
    map.put("uvg", "image/vnd.dece.graphic");
    map.put("uvi", "image/vnd.dece.graphic");
    map.put("uvvg", "image/vnd.dece.graphic");
    map.put("uvvi", "image/vnd.dece.graphic");
    map.put("wbmp", "image/vnd.wap.wbmp");
    map.put("wdp", "image/vnd.ms-photo");
    map.put("webp", "image/webp");
    map.put("xbm", "image/x-xbitmap");
    map.put("xif", "image/vnd.xiff");
    map.put("xpm", "image/x-xpixmap");
    map.put("xwd", "image/x-xwindowdump");
    return unmodifiableMap(map);
  }

  private static Map<String, String> texts() {
    Map<String, String> map = new HashMap<String, String>(94);
    map.put("3dml", "text/vnd.in3d.3dml");
    map.put("appcache", "text/cache-manifest");
    map.put("asm", "text/x-asm");
    map.put("body", "text/html");
    map.put("c", "text/x-c");
    map.put("cc", "text/x-c");
    map.put("conf", "text/plain");
    map.put("cpp", "text/x-c");
    map.put("css", "text/css");
    map.put("csv", "text/csv");
    map.put("curl", "text/vnd.curl");
    map.put("cxx", "text/x-c");
    map.put("dcurl", "text/vnd.curl.dcurl");
    map.put("def", "text/plain");
    map.put("dic", "text/x-c");
    map.put("dsc", "text/prs.lines.tag");
    map.put("etx", "text/x-setext");
    map.put("f", "text/x-fortran");
    map.put("f77", "text/x-fortran");
    map.put("f90", "text/x-fortran");
    map.put("flx", "text/vnd.fmi.flexstor");
    map.put("fly", "text/vnd.fly");
    map.put("for", "text/x-fortran");
    map.put("gv", "text/vnd.graphviz");
    map.put("h", "text/x-c");
    map.put("hh", "text/x-c");
    map.put("htc", "text/x-component");
    map.put("htm", "text/html");
    map.put("html", "text/html");
    map.put("ics", "text/calendar");
    map.put("ifb", "text/calendar");
    map.put("in", "text/plain");
    map.put("jad", "text/vnd.sun.j2me.app-descriptor");
    map.put("java", "text/x-java-source");
    map.put("jsf", "text/plain");
    map.put("jspf", "text/plain");
    map.put("list", "text/plain");
    map.put("log", "text/plain");
    map.put("man", "text/troff");
    map.put("mcurl", "text/vnd.curl.mcurl");
    map.put("me", "text/troff");
    map.put("ms", "text/troff");
    map.put("n3", "text/n3");
    map.put("nfo", "text/x-nfo");
    map.put("opml", "text/x-opml");
    map.put("p", "text/x-pascal");
    map.put("pas", "text/x-pascal");
    map.put("roff", "text/troff");
    map.put("rtx", "text/richtext");
    map.put("s", "text/x-asm");
    map.put("scurl", "text/vnd.curl.scurl");
    map.put("sfv", "text/x-sfv");
    map.put("sgm", "text/sgml");
    map.put("sgml", "text/sgml");
    map.put("spot", "text/vnd.in3d.spot");
    map.put("sub", "text/vnd.dvb.subtitle");
    map.put("t", "text/troff");
    map.put("text", "text/plain");
    map.put("tr", "text/troff");
    map.put("tsv", "text/tab-separated-values");
    map.put("ttl", "text/turtle");
    map.put("txt", "text/plain");
    map.put("uri", "text/uri-list");
    map.put("uris", "text/uri-list");
    map.put("urls", "text/uri-list");
    map.put("uu", "text/x-uuencode");
    map.put("vcard", "text/vcard");
    map.put("vcf", "text/x-vcard");
    map.put("vcs", "text/x-vcalendar");
    map.put("wml", "text/vnd.wap.wml");
    map.put("wmls", "text/vnd.wap.wmlscript");
    return unmodifiableMap(map);
  }

  public abstract int get(File file);
}
